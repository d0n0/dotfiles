[[plugins]] # 補完
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#enable_smart_case = 1

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]] # シンタックスチェック
repo = 'neomake/neomake'
on_path = '.*'
hook_add = '''
    autocmd! BufWritePost * Neomake
'''
hook_source = '''
    let g:neomake_javascript_enabled_makers = ['eslint']
    let g:neomake_highlight_lines = 0
    let g:neomake_highlight_columns = 0
    let g:neomake_error_sign = {'text': '>>', 'texthl': 'DiffDelete'}
    let g:neomake_warning_sign = {'text': '>>', 'texthl': 'Todo'}
'''

[[plugins]] # Html5
repo  = 'othree/html5.vim'
on_ft = 'html'

[[plugins]] # Toml
repo  = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # Markdown
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
    let g:vim_markdown_frontmatter = 1
    let g:vim_markdown_math = 1
'''

# javascript
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']

[[plugins]] # jsdoc
repo = 'heavenshell/vim-jsdoc'
on_ft = ['javascript']

[[plugins]] # javascript-syntaxhighlight
repo = 'othree/yajs.vim'
on_ft = ['javascript']

#[[plugins]] # ローカルインストールしたESLintを使うためのプラグイン
#repo = 'benjie/neomake-local-eslint.vim'
#on_ft = ['javascript']
#on_cmd = ['EnableESLint']

[[plugins]]
repo = 'zchee/deoplete-clang'
hook_source = '''
    if has('mac')
        let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
        let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
    endif
'''
on_ft = ['c','cpp','cmake']
depends = ['deoplete.nvim']

[[plugins]] # Golang
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    au FileType go nmap <leader>r <Plug>(go-run-split)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>c <Plug>(go-coverage)

    au FileType go :highlight goErr cterm=bold ctermfg=214
    au FileType go :match goErr /\<err\>/

    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1

    let g:go_fmt_command = "goimports"
    let s:goargs = go#package#ImportPath(expand('%:p:h'))

    let g:neomake_go_errcheck_maker = {
    \ 'args': ['-abspath', s:goargs],
    \ 'append_file': 0,
    \ 'errorformat': '%f:%l:%c:\ %m, %f:%l:%c\ %#%m',
    \ }

    let g:neomake_go_enabled_makers = ['golint', 'govet', 'errcheck']
    let g:go_list_type = "quickfix"
'''


[[plugins]] # Japanese doc
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]] # Codic
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]] # vim-gista
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = '''
    let g:gista#client#default_username = 'd0n0'
'''

[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
on_i = 1
hook_source = '''
    let g:user_emmet_mode = 'i'
    let g:user_emmet_leader_key='<C-E>'
    let g:use_emmet_complete_tag = 1
    let g:user_emmet_settings = {
    \   'variables': {
    \       'lang': "ja"
    \   },
    \   'indentation': '    '
    \}
'''

[[plugins]] # EditorConfig
repo = 'editorconfig/editorconfig-vim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'denite.nvim'
on_path = '.*'

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'denite.nvim'
on_event = 'TextYankPost'

on_ft = ['c', 'cpp', 'cmake']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'vimlab/split-term.vim'
on_cmd = ['Term','VTerm']
hook_source = '''
    set splitbelow
    set splitright
'''
